Quick Summary
The Zeek file analysis framework (FAF) allows users to easily view information related to transferred files, perform file hashing automatically, and extract suspicious files for forensic analysis. This lab will introduce you to the framework and how it can be used to identify and extract malicious files.

What is the file analysis framework?
The file analysis framework (FAF) provides file metadata and analysis capabilities, introducing a simpler way of accessing file-related information than was previously possible. 

Before the FAF, file analysis scripts had to be protocol-specific, meaning that the information produced would only be related to the files transferred over each protocol. For wider coverage, these scripts had to be copied and modified to fit other protocols. 

With FAF, users are provided with generalized file information. While protocol-related information is still available, analysis is no longer dependent on it.

Hashing
Completed 11/19/2021
Practical Lab
2

20 Points
15 Minutes
We can hash it out!

View Lab
The FAF also allows for all files to be extracted to the local file system for later forensic analysis. This is not the default behavior but is an option that's very easy to implement as will become apparent later in this lab.

Entropy testing is another feature that comes with FAF but isn't enabled by default. In the context of files, entropy is a value ranging from one to eight that measures randomness in a piece of data. A higher number correlates with increased randomness and can be used to identify packed, encrypted, or compressed files. These techniques are often used legitimately, however, they may also be utilized by malicious actors to obfuscate malware.

While entropy alone won't distinguish harmful files from innocuous ones, it can be taken into consideration when flagging items as suspicious and in malware analysis (e.g., for classification purposes).


Using the file analysis framework
When Zeek is used to generate logs from a packet capture or live traffic, the FAF writes metadata relating to all transferred files out to files.log. In this framework, “files” can include byte streams pulled from a network connection or another input source. The FAF can also produce more specific logs as follows:

pe.log – Additional information on portable executable (PE) files such as EXE and DLL, including when the file was compiled, the required operating system for it, and whether it's a 64-bit executable.
x509.log – X.509 certificate information, such as its fingerprint, whether it was sent from the client, and more.
ocsp.log – Data on online certificate status protocol (OCSP) requests and responses.
unified2.log – Interpretation of Snort’s unified output.
Below is a JSON format files.log. Note that the analyzers and fields relating to entropy testing and file extraction are not found in a files.log by default, as these have to be enabled first.

{
   "ts": 1622061464.12401,
   "fuid": "FL17xT1Qqv67iExoGi",
   "tx_hosts": [
       "192.236.155.230"
   ],
   "rx_hosts": [
       "10.5.26.4"
   ],
   "conn_uids": [
       "C1Enfr2eMeOi3ajNc5"
   ],
   "source": "HTTP",
   "depth": 0,
   "analyzers": [
       "ENTROPY",
       "SHA1",
       "MD5",
       "EXTRACT",
       "PE"
   ],
   "mime_type": "application/x-dosexec",
   "duration": 1.0848438739776612,
   "is_orig": false,
   "seen_bytes": 1384526,
   "total_bytes": 1384526,
   "missing_bytes": 0,
   "overflow_bytes": 0,
   "timedout": false,
   "md5": "b8101e57b8873916caa6953bb73dfefd",
   "sha1": "a38b59afb1f03b2c2cfc14ae5a953d8e5fd6b56d",
   "extracted": "extract-1622061464.12401-HTTP-FL17xT1Qqv67iExoGi",
   "extracted_cutoff": false,
   "entropy": 6.0302535684444849
}
files.log fields explained
ts – Timestamp of when the file was first seen.
fuid – Unique identifier of the file.
tx_hosts – Address of the host(s) the data originated from.
rx_hosts – Address of the host(s) the data traveled to.
conn_uids – Unique identifier of the connection over which the file was transferred. This corresponds to the relevant UID in conn.log and other Zeek logs.
source – Source of the file, such as the protocol that the file was transferred over or the local file path from which it was read.
depth – Depth of the file in relation to its source. In the above example (the source being HTTP), it's the depth of the request within the TCP connection.
analyzers – The analyzers used in the analysis of the file. Note that the above file has the portable executable (PE) analyzer listed, this will be the case for every file that has a mime type of application/x-dosexec.
mime_type – What Zeek estimates the MIME type of the file to be.
duration – How long the analysis took.
is_orig – Whether the file is sent by the originator of the relevant network connection or the responder.
seen_bytes – The number of bytes analyzed.
total_bytes – The total number of bytes in the file.
missing_bytes – The number of bytes that were missed in analysis (e.g., due to dropped packets).
overflow_bytes – The number of bytes that were not analyzed (e.g., due to overlapping bytes).
timedout – Whether the file analysis timed out at any point.
md5 – MD5 hash of the file.
sha1 – SHA1 hash of the file.
extracted – Local name of the extracted file. Resides in the extract_files directory, which can be found in the same location as the generated logs.
extracted_cutoff – Whether the file being extracted was cut off (preventing the whole file from being logged).
entropy – Entropy of the data, ranging from one to eight.
The FAF can detect malware through Team Cymru's Malware Hash Registry (MHR), which searches file hashes against its own database and numerous antivirus databases of known malware hash values. The framework relies on the SHA1 hash by default, but the MHR does support SHA1, SHA256, and MD5. Further information on any files that are flagged as a match can be found in notice.log. Below is the notice.log corresponding to the files.log discussed above.

{
   "ts": 1622062607.121345,
   "uid": "C3rXIv42eKa3CpYykl",
   "id.orig_h": "10.5.26.4",
   "id.orig_p": 56042,
   "id.resp_h": "192.236.155.230",
   "id.resp_p": 80,
   "fuid": "FL17xT1Qqv67iExoGi",
   "file_mime_type": "application/x-dosexec",
   "file_desc": "http://192.236.155.230/images/redbutton.png",
   "proto": "tcp",
   "note": "TeamCymruMalwareHashRegistry::Match",
   "msg": "Malware Hash Registry Detection rate: 35%  Last seen: 2021-07-15 11:52:58",
   "sub": "https://www.virustotal.com/en/search/?query=a38b59afb1f03b2c2cfc14ae5a953d8e5fd6b56d",
   "src": "10.5.26.4",
   "dst": "192.236.155.230",
   "p": 80,
   "actions": [
       "Notice::ACTION_LOG"
   ],
   "suppress_for": 3600.0
}
The files.log and notice.log above are generated from the same file transfer. As a result, some fields share the same value across both logs such as the file UIDs and connection UIDs in each. Other fields have values that complement each other such as the source (in files.log) and the protocol and port number (in notice.log). The msg field in notice.log specifies a detection rate based on how many of the databases have flagged the file as malware. The sub field links to a Virus Total search using the SHA1 hash of the file.

Note: Virus Total's search URL format has changed, this will be up-to-date in newer versions of Zeek.

File analysis scripts
There are several file lifecycle events that can be used in Zeek scripts for file analysis. Information can be gathered about files by handling specific events and specifying the data that should be produced when these events occur. 

Some events in a file's lifecycle:

file_new – Analysis of a new file has begun.
file_over_new_connection – A file is being transferred over a new connection.
file_weird – Unexpected activity related to a file has been detected.
file_state_remove – File analysis is ending.
file_gap – A chunk of the file is missing.
File extraction and other analysis can be carried out using built-in file analyzers. Analyzers usually produce information about files via events (such as those listed above) or carry out an action. 

Some file analysis components:

Files::ANALYZER_EXTRACT – Writes contents of a file to disk.
Files::ANALYZER_MD5 – Calculates and reports a file's MD5 checksum.
Files::ANALYZER_SHA1 – Calculates and reports a file's SHA1 checksum.
Files::ANALYZER_SHA256 – Calculates and reports a file's SHA256 checksum.
Files::ANALYZER_ENTROPY – Entropy tests a file's contents.
Files::ANALYZER_PE – Analyzes portable executable files. Output is written to pe.log.
Enabling and using file analysis components
As covered in the scripting lab in this series, specific FAF scripts can be run on PCAP files. For example:

zeek -r <pcap file> /opt/zeek/share/zeek/policy/frameworks/files/extract-all-files.zeek

However, if multiple scripts are needed they can be enabled in /opt/zeek/share/zeek/site/local.zeek by adding this line:

@load <relative filepath to script from /opt/zeek/share/zeek/policy/>

The .zeek extension is not necessary! As you will see if you inspect local.zeek, file hashing and the MHR lookup are already enabled. File extraction and entropy testing can also be loaded in this manner. All scripts can then be run on the same PCAP with this command:

zeek -r <pcap file> local
