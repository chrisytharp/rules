Zeek intelligence framework is used to consume threat intelligence data. 
The Zeek intelligence framework is used to consume the intelligence data and match it against other generated logs and metadata from the network. 

What is threat intelligence
---------------------------
Threat intelligence is a collection of information about the behaviors and motivations of threat actors, used to gain insight into current and emerging threats. 

Organizations use threat intelligence to help improve and adapt their defenses and security posture against threat actors. Threat intelligence uses (IoCs) which can
be collected from a variety of sources such as event logs, past incident responses, and external sources. 

The intelligence framework
--------------------------
The intelligence framework involves three main steps:
  1 - The intelligence data files are loaded.
  2 - A mechanism tells the intelligence framework that a piece of data that needs to be inspected has been identified or “seen” with the help of the 
      [Intel:Seen] function
  3 - The framework processes any positive matches that have been discovered and outputs them into an [intel.log]

Using the intelligence framework
--------------------------------
Intelligence files
      To make an intelligence file, you first need to create the components, or “fields”, with the information you want to have intelligence on. This involves 
      specifying the following fields: 

indicator       = which represents the value of the indicator type (e.g., an IP address or a file hash).
indicator_type  = which represents the type of indicator (e.g., Intel::ADDR or Intel::URL).
metadata        = which can be added for more descriptive information about a piece of intelligence. For example the data source, description, or the name of the
                  threat actor that the intelligence data is attributed to.
                  
It is important for the fields to be separated with a 'single tab character' or the file won't be processed correctly.
Example intel.txt: 

                  #fields     indicator     indicator_type     meta.source     meta.desc
                  192.168.2.34    Intel::ADDR    known_bad_IPs    Example IP addresses
                  10.182.3.44     Intel::ADDR    known_bad_IPs    Example IP addresses
                  04b6aec529d4656040a68e18afdabfa4   Intel::FILE_HASH    malicious_files    Example file hash
                  00fe3ca532f876c7505ddbf5825de404   Intel::FILE_HASH   malicious_files   Example file hash
                  htd-domain.com  Intel::DOMAIN   bad_domains Example domains
                  htp.domain.com Intel::DOMAIN    bad_domains Example domains
                  htp2.exampledomain.com Intel::DOMAIN    bad_domains Example domains
                  https://badurl1.ga Intel::URL bad_URLs    Example URL
                  https://badurl2.gq Intel::URL bad_URLs    Example URL
                  https://badurl3.ml Intel::URL bad_URLs    Example URL

Indicator types
---------------
There are different intelligence indicator types that you can use to match in your intelligence file. You can use one of the following components or a combination 
to create your intelligence:
                                    Intel::ADDR – IP address
                                    Intel::SUBNET – network subnet range
                                    Intel::URL – a complete URL
                                    Intel::SOFTWARE – software name
                                    Intel::EMAIL – email address
                                    Intel::DOMAIN – domain name
                                    Intel::USER_NAME – user name
                                    Intel::CERT_HASH – SHA-1 certificate hash
                                    Intel::PUBKEY_HASH – MD5 public key hash
                                    Intel::FILE_NAME – file hash

Intelligence files will often be separated, depending on your indicator type. For instance, you could have one file with a list of IP addresses, another file with 
a list of hashes, and so on. This can be seen in the practical exercise of this lab.

Loading the intelligence framework
----------------------------------
Now that you have sorted your intelligence files, it's time to load them into Zeek.
Zeek comes with a set of scripts that provide data for the intelligence framework. To see any match results and to generate an [intel.log] the framework must be 
informed that a piece of information has been extracted and compare it against the loaded intelligence files. 
This can be achieved with the help of the [Intel::seen] function. 

To load the appropriate intelligence scripts for sending data to the framework, you can use following line when creating a new .zeek script or simply include it in 
your /opt/zeek/share/zeek/site/local.zeek: 

                      @load frameworks/intel/seen

Loading intelligence files
--------------------------
Integrating threat intelligence data with Zeek can be achieved in several ways. You can configure it to load through external intelligence feeds with the help of
open-source modules such as the Dovehawk Zeek Module which enables the integration of intelligence from the MISP platform. Check out a publicly available collection
of Zeek formatted intelligence feeds on GitHub.

Alternatively, you can write your own intelligence and manually add files to the framework by using the following lines in (/opt/zeek/share/zeek/site/local.zeek): 

                     redef Intel::read_files += {"Directory/intel-file.txt",};

The first part specifies a redefinable option to read intelligence files followed by the directory and the file name. 

You can also add multiple files by separating them with a 'comma' 
Example, running an intelligence script containing two intelligence files located on your desktop would look like the lines below:

                      @load frameworks/intel/seen
                      redef Intel::read_files += {“Desktop/hash-list.txt", "Desktop/email-list.txt"};

To run the script through the packet capture you can use the following command: 

                       zeek -r <pcap-file> <script.zeek>






























