zeek-cut
--------
zeek-cut makes interacting w/ TSV logs easier. You can parse TSV log files by specifying [header fields] to view all data held under a common header
zeek-cut only takes input through redirection, using the operators '|' and '<'
Example...
              cat conn.log | zeek-cut
              # OR
              zeek-cut < conn.log
              
When cmd is ran with no field names, zeek-cut will simply output ALL fields. 
Fields can be specified at the end of the cmd

Ex... vieww all instances of the field ‘id.orig_h’ This cmd can be chained together w/ others to compile information from the log data         

              cat conn.log | zeek-cut id.orig_h
              # OR
              zeek-cut id.orig_h  < conn.log
awk
---
awk is used to search logs & modify the output w/ terminal scripting functions (like simple variables) to store & manipulate values before output

For instance, if you want to look for the source IP address field in a log file and know that it appears in the third column of the log, 
you can query the position by using the positional variable $3

              awk ‘/^[^#]/ {print $3}’ dns.log
              
The same logic can be applied to the rest of the log fields (the variable $1 for the field ts and the variable $2 for the field uid, etc). 
Positional vars can then be used with programmatic operators (=, >, <, etc) to search for more specific information within a log file. 
For example, an IP address can be specified by the use of its positional variable & then with the == operator given as a filter (awk ‘$3 == “x.x.x.x”’).

Regular expressions (regex) can match patterns of text within data. 
The pattern /^[^#]/ is used to match the log's content only, ignoring any headings that start with a '#' character

Output can be piped into a zeek-cut command for more advanced parsing of specific fields

Searching Zeek JSON logs
------------------------
jq
Analysts may choose to convert PCAPs into JSON logs, which can be inspected using specialized applications that recognize the format, 
such as jq – a JSON parser
By default, jq outputs JSON formatted data into key:value pairs.

               jq conn.log
               
When you run jq without any flags or fields, it will output everything
The tool is most useful when you give it specific fields to look for
-c prints the output of jq in a more 'compact' format. 

                jq ‘.proto’ conn.log
                
If you'd like to retrieve multiple keys, you can separate them using a comma between each field:

                jq '.field1,.field2' conn.log
                
more info @ https://stedolan.github.io/jq/manual/

How to analyze Zeek logs
------------------------
The conn.log serves as an excellent starting point during an investigation. This log provides a lot of basic information
If you wanted to look for all connections made from a specific IP address, you could query the log field ‘id.orig_h‘ in the log ‘conn.log‘

You wil likely use a combination of the tools in Linux command-line such as:

                cat, head, tail, grep, sort, uniq, wc, etc. 

you can use the field ‘id.orig_h’ to view endpoint IP addresses where a connection originated from in the 'conn.log' then can compile data from this 
field to determine certain information from the log file; in this example, to determine the most talkative hosts & display the total connections made 
by this host. 

                cat conn.log | zeek-cut id.orig_h | sort | uniq -c | sort -n
                
Command summary
      # Remember, these commands can be combined to achieve what you need using the pipe character (|).
      
            cat log.log | zeek-cut                    # uses zeek-cut to print all fields in a log file in a human-readable format.
            zeek-cut < log.log                        # uses zeek-cut to print all fields in a log file in a human-readable format.
            cat log.log | zeek-cut field1 field2      # uses zeek-cut  to print only the specified fields from a log.
            zeek-cut field1 field2 < log.log          # uses zeek-cut  to print only the specified fields from a log.
            jq . log.log                              # uses jq utility to print everything in a JSON log file in a human-readable format.
            jq ‘.field1’ log.log                      # uses  jq utility to print only the specified files from a JSON log.
            awk ‘/^[^#]/ {print $3}' log.log          # uses awk to query for the 3rd positional variable in a log file.
            sort -u                                   # sort the data and output only the first time it appears.
            sort -n                                   # sort the data numerically.
            uniq -c                                   # print unique lines and count how many times they appear.
            wc -l                                     # display the number of lines in a specified file.
            head -n 5                                 # prints the first 5 lines of a file.







